function [outCoeffs] = OrganizeCoefficients( ...
numBurgsA,numBurgsCA,numBurgsC,numBurgs,numPlaneTypes, ... % Organization-related inputs
coeffsStruct)                                              % Coefficients structure
    % INPUT:
    %       numBurgsA, etc: Number of that Burgers vector type -- each size (1)
    %       numBurgs, numPlaneTypes: Number of Burgers vectors and plane types -- each size (1)
    %       coeffsStruct: structure of material coefficients
	% OUTPUT: 
	%       outCoeffs: matrix of organized material coefficients -- size (numBurgs,totPlaneTypes)
    
    % NOTE: segments with the same Burgers vector type (i.e.
    % <a>, <c+a>, or <c>) and plane type will have the same coefficients.
    % coeffs(B,P) == Coefficient of a segment on a slip system with Burgers
    %                 vector index B and plane type P.
    
    assert(numBurgs == numBurgsA + numBurgsCA + numBurgsC, ...
          'numBurgs != numBurgsA + numBurgsCA + numBurgsC');
    
    % Extract coefficients from coeffsStruct:
    a_Ba = coeffsStruct.a_Ba;
    a_Pr = coeffsStruct.a_Pr;
    a_PyI = coeffsStruct.a_PyI;
    a_PyII = coeffsStruct.a_PyII;
    ca_Pr = coeffsStruct.ca_Pr;
    ca_PyI = coeffsStruct.ca_PyI;
    ca_PyII = coeffsStruct.ca_PyII;
    ca_sP = coeffsStruct.ca_sP;
    c_Pr = coeffsStruct.c_Pr;
    sessile = coeffsStruct.sessile;
    
    totPlaneTypes = numPlaneTypes + 1; % Includes sessile planes
    
    outCoeffs = zeros(numBurgs,totPlaneTypes);
	
    % Defining indices:
    idxA = 1;                  % 1
    idxCA = idxA + numBurgsA;  % 4
    idxC = idxCA + numBurgsCA; % 10
    
	% <a> segments
	outCoeffs(1:idxCA-1,:) = repmat(reshape( ...
                               [a_Ba; ...
                                a_Pr; ...
                                a_PyI; ...
								a_PyII; ...
								sessile;
                                sessile] ...
								,1,totPlaneTypes) ... % reshape: reshaping to fit into coeffs
								,numBurgsA,1); % repmat: repeating numBurgsA times since each <a> type segment has numBurgsA possible Burgers vectors
	
	% <c+a> segments
	outCoeffs(idxCA:idxC-1,:) = repmat(reshape( ...
							   [sessile; ...
                                ca_Pr; ...
                                ca_PyI; ...
								ca_PyII; ...
								ca_sP;
                                sessile] ...
								,1,totPlaneTypes) ...
								,numBurgsCA,1);

	% <c> segments
	outCoeffs(idxC:end,:) = repmat(reshape( ...
							   [sessile; ...
                                c_Pr; ...
                                sessile; ...
								sessile; ...
								sessile;
                                sessile] ...
								,1,totPlaneTypes) ...
								,numBurgsC,1);
    
    
    % Asserts proper size of coeffs:
    assert(all(size(outCoeffs) == [numBurgs,totPlaneTypes]), ...
    'size(outCoeffs) should be [%d,%d], but is [%d,%d].', ...
    numBurgs,totPlaneTypes,size(outCoeffs,1),size(outCoeffs,2));
end